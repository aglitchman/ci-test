diff --git a/build_tools/sdk.py b/build_tools/sdk.py
index 75d8864a2f..be1a262144 100644
--- a/build_tools/sdk.py
+++ b/build_tools/sdk.py
@@ -71,8 +71,8 @@ ANDROID_64_NDK_API_VERSION='21' # Android 5.0
 # Win32
 
 # The version we have prepackaged
-VERSION_WINDOWS_SDK_10="10.0.20348.0"
-VERSION_WINDOWS_MSVC_2022="14.37.32822"
+VERSION_WINDOWS_SDK_10=os.environ.get('VERSION_WINDOWS_SDK_10', "10.0.26100.0")
+VERSION_WINDOWS_MSVC_2022=os.environ.get('VERSION_WINDOWS_MSVC_2022', "14.37.32822")
 PACKAGES_WIN32_TOOLCHAIN=f"Microsoft-Visual-Studio-2022-{VERSION_WINDOWS_MSVC_2022}"
 PACKAGES_WIN32_SDK_10=f"WindowsKits-{VERSION_WINDOWS_SDK_10}"
 
diff --git a/build_tools/waf_dynamo.py b/build_tools/waf_dynamo.py
index f8db79071b..ba2b1b9224 100644
--- a/build_tools/waf_dynamo.py
+++ b/build_tools/waf_dynamo.py
@@ -79,7 +79,7 @@ def platform_supports_feature(platform, feature, data):
     if feature == 'opengl_compute':
         return platform not in ['js-web', 'wasm-web', 'wasm_pthread-web', 'x86_64-ios', 'arm64-ios', 'arm64-macos', 'x86_64-macos']
     if feature == 'opengles':
-        return platform in ['arm64-linux']
+        return platform in ['arm64-linux', 'x86_64-win32', 'win32']
     if feature == 'webgpu':
         return platform in ['js-web', 'wasm-web', 'wasm_pthread-web']
     return waf_dynamo_vendor.supports_feature(platform, feature, data)
@@ -123,6 +123,9 @@ def platform_graphics_libs_and_symbols(platform):
     elif platform in ('arm64-linux'):
         use_opengles = True
         use_vulkan = Options.options.with_vulkan
+    elif platform in ('x86_64-win32', 'win32'):
+        use_opengles = True
+        use_vulkan = Options.options.with_vulkan
     else:
         use_opengl = True
         use_vulkan = Options.options.with_vulkan
@@ -495,6 +498,7 @@ def default_flags(self):
             if f == 'CXXFLAGS':
                 self.env.append_value(f, ['-fno-rtti'])
 
+        print("<!> linkflags: ", f'--target={clang_arch}', build_util.get_target_platform())
         self.env.append_value('LINKFLAGS', [f'--target={clang_arch}'])
 
     elif TargetOS.MACOS == target_os:
diff --git a/engine/engine/wscript b/engine/engine/wscript
index 0be334ad27..c27ec6235d 100644
--- a/engine/engine/wscript
+++ b/engine/engine/wscript
@@ -117,7 +117,7 @@ def configure(conf):
         conf.env['STLIB_CPP_RUNTIME'] = 'c++_static'
 
     elif target_os == TargetOS.WINDOWS:
-        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'shell32.lib', 'xinput9_1_0.lib', 'dbghelp.lib', 'dinput8.lib', 'dxguid.lib'])
+        conf.env.append_value('LINKFLAGS', ['libEGL.dll.lib', 'libGLESv2.dll.lib', 'user32.lib', 'shell32.lib', 'xinput9_1_0.lib', 'dbghelp.lib', 'dinput8.lib', 'dxguid.lib'])
 
         if waflib.Options.options.with_vulkan:
             conf.env.append_value('LINKFLAGS', ['vulkan-1.lib'])
diff --git a/engine/graphics/src/graphics.cpp b/engine/graphics/src/graphics.cpp
index 8f49d4c1d3..1d865ecebe 100644
--- a/engine/graphics/src/graphics.cpp
+++ b/engine/graphics/src/graphics.cpp
@@ -354,6 +354,7 @@ namespace dmGraphics
             else
             {
                 selected_shader = shader;
+                break; // Stop searching for a shader -> to stay on GLES 3.0 shader.
             }
         }
         return selected_shader;
diff --git a/engine/graphics/src/opengl/graphics_opengl.cpp b/engine/graphics/src/opengl/graphics_opengl.cpp
index 4abb76a60b..4c36debde4 100644
--- a/engine/graphics/src/opengl/graphics_opengl.cpp
+++ b/engine/graphics/src/opengl/graphics_opengl.cpp
@@ -84,116 +84,7 @@
 #elif defined (__linux__)
     // NOP
 #elif defined (_WIN32)
-    #ifdef GL_GLEXT_PROTOTYPES
-        #undef GL_GLEXT_PROTOTYPES
-        #include "win32/glext.h"
-        #define GL_GLEXT_PROTOTYPES
-    #else
-        #include "win32/glext.h"
-    #endif
-
-    // VBO Extension for OGL 1.4.1
-    typedef void (APIENTRY * PFNGLGENPROGRAMARBPROC) (GLenum, GLuint *);
-    typedef void (APIENTRY * PFNGLVERTEXPARAMFLOAT4ARBPROC) (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
-    typedef void (APIENTRY * PFNGLVERTEXATTRIBSETPROC) (GLuint);
-    typedef void (APIENTRY * PFNGLVERTEXATTRIBPTRPROC) (GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
-    typedef void (APIENTRY * PFNGLTEXPARAM2DPROC) (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-    typedef void (APIENTRY * PFNGLCOMPRTEXSUB2DPROC) (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-    typedef void (APIENTRY * PFNGLBINDBUFFERPROC) (GLenum, GLuint);
-    typedef void (APIENTRY * PFNGLBUFFERDATAPROC) (GLenum, GLsizeiptr, const GLvoid*, GLenum);
-    typedef void (APIENTRY * PFNGLBINDRENDERBUFFERPROC) (GLenum, GLuint);
-    typedef void (APIENTRY * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum, GLenum, GLsizei, GLsizei);
-    typedef void (APIENTRY * PFNGLRENDERBUFFERTEXTURE2DPROC) (GLenum, GLenum, GLenum, GLuint, GLint);
-    typedef void (APIENTRY * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum, GLenum, GLenum, GLuint);
-    typedef void (APIENTRY * PFNGLBINDFRAMEBUFFERPROC) (GLenum, GLuint);
-    typedef void (APIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum, GLintptr, GLsizeiptr, const GLvoid*);
-    typedef void* (APIENTRY * PFNGLMAPBUFFERPROC) (GLenum, GLenum);
-    typedef GLboolean (APIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum);
-    typedef void (APIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum);
-    typedef void (APIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum, GLenum, GLint, GLuint);
-    typedef void (APIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum, GLenum, GLenum, GLenum);
-    typedef void (APIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei, const GLenum*);
-    typedef GLint (APIENTRY * PFNGLGETFRAGDATALOCATIONPROC) (GLuint, const char*);
-    typedef void (APIENTRY * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint, GLuint, const char*);
-
-    PFNGLVERTEXATTRIBSETPROC glEnableVertexAttribArray = NULL;
-    PFNGLVERTEXATTRIBSETPROC glDisableVertexAttribArray = NULL;
-    PFNGLVERTEXATTRIBPTRPROC glVertexAttribPointer = NULL;
-    PFNGLTEXPARAM2DPROC glCompressedTexImage2D = NULL;
-    PFNGLCOMPRTEXSUB2DPROC glCompressedTexSubImage2D = NULL;
-    PFNGLGENBUFFERSPROC glGenBuffersARB = NULL;
-    PFNGLDELETEBUFFERSPROC glDeleteBuffersARB = NULL;
-    PFNGLBINDBUFFERPROC glBindBufferARB = NULL;
-    PFNGLBUFFERDATAPROC glBufferDataARB = NULL;
-    PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers = NULL;
-    PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer = NULL;
-    PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage = NULL;
-    PFNGLRENDERBUFFERTEXTURE2DPROC glFramebufferTexture2D = NULL;
-    PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer = NULL;
-    PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers = NULL;
-    PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer = NULL;
-    PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers = NULL;
-    PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers = NULL;
-    PFNGLBUFFERSUBDATAPROC glBufferSubDataARB = NULL;
-    PFNGLMAPBUFFERPROC glMapBufferARB = NULL;
-    PFNGLUNMAPBUFFERPROC glUnmapBufferARB = NULL;
-    PFNGLACTIVETEXTUREPROC glActiveTexture = NULL;
-    PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus = NULL;
-    PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate = NULL;
-    PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate = NULL;
-
-    PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib = NULL;
-    PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation = NULL;
-    PFNGLCREATESHADERPROC glCreateShader = NULL;
-    PFNGLSHADERSOURCEPROC glShaderSource = NULL;
-    PFNGLCOMPILESHADERPROC glCompileShader = NULL;
-    PFNGLGETSHADERIVPROC glGetShaderiv = NULL;
-    PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = NULL;
-    PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog = NULL;
-    PFNGLDELETESHADERPROC glDeleteShader = NULL;
-    PFNGLCREATEPROGRAMPROC glCreateProgram = NULL;
-    PFNGLATTACHSHADERPROC glAttachShader = NULL;
-    PFNGLLINKPROGRAMPROC glLinkProgram = NULL;
-    PFNGLDELETEPROGRAMPROC glDeleteProgram = NULL;
-    PFNGLUSEPROGRAMPROC glUseProgram = NULL;
-    PFNGLGETPROGRAMIVPROC glGetProgramiv = NULL;
-    PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform = NULL;
-    PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = NULL;
-    PFNGLUNIFORM4FVPROC glUniform4fv = NULL;
-    PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv = NULL;
-    PFNGLUNIFORM1IPROC glUniform1i = NULL;
-
-    PFNGLTEXSUBIMAGE3DPROC           glTexSubImage3D = NULL;
-    PFNGLTEXIMAGE3DPROC              glTexImage3D = NULL;
-    PFNGLCOMPRESSEDTEXIMAGE3DPROC    glCompressedTexImage3D = NULL;
-    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D = NULL;
-
-    // Compute
-    PFNGLDISPATCHCOMPUTEPROC  glDispatchCompute  = NULL;
-    PFNGLMEMORYBARRIERPROC    glMemoryBarrier    = NULL;
-    PFNGLBINDIMAGETEXTUREPROC glBindImageTexture = NULL;
-
-    // Uniform buffer objects
-    PFNGLBINDBUFFERBASEPROC          glBindBufferBase          = NULL;
-    PFNGLBUFFERDATAPROC              glBufferData              = NULL;
-    PFNGLGETUNIFORMBLOCKINDEXPROC    glGetUniformBlockIndex    = NULL;
-    PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv = NULL;
-    PFNGLGETACTIVEUNIFORMSIVPROC     glGetActiveUniformsiv     = NULL;
-    PFNGLGENBUFFERSPROC              glGenBuffers              = NULL;
-    PFNGLBINDBUFFERPROC              glBindBuffer              = NULL;
-    PFNGLUNIFORMBLOCKBINDINGPROC     glUniformBlockBinding     = NULL;
-
-    #if !defined(GL_ES_VERSION_2_0)
-        PFNGLGETSTRINGIPROC glGetStringi = NULL;
-        PFNGLGENVERTEXARRAYSPROC glGenVertexArrays = NULL;
-        PFNGLBINDVERTEXARRAYPROC glBindVertexArray = NULL;
-        PFNGLDRAWBUFFERSPROC glDrawBuffers = NULL;
-        PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation = NULL;
-        PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation = NULL;
-        PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced = NULL;
-        PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced = NULL;
-        PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor = NULL;
-    #endif
+    // NOP
 #elif defined(__EMSCRIPTEN__)
     #include <GL/glext.h>
     #if defined GL_ES_VERSION_2_0
@@ -968,104 +859,6 @@ static void LogFrameBufferError(GLenum status)
         assert(_context);
         OpenGLContext* context = (OpenGLContext*) _context;
 
-#if defined (_WIN32)
-    #define GET_PROC_ADDRESS_OPTIONAL(function, name, type) \
-        function = (type)wglGetProcAddress(name);\
-        if (function == 0x0)\
-        {\
-            function = (type)wglGetProcAddress(name "ARB");\
-        }\
-        if (function == 0x0)\
-        {\
-            function = (type)wglGetProcAddress(name "EXT");\
-        }
-
-    #define GET_PROC_ADDRESS(function, name, type)\
-        GET_PROC_ADDRESS_OPTIONAL(function, name, type) \
-        if (function == 0x0)\
-        {\
-            dmLogError("Could not find gl function '%s'.", name);\
-            return false;\
-        }
-
-        GET_PROC_ADDRESS(glEnableVertexAttribArray, "glEnableVertexAttribArray", PFNGLVERTEXATTRIBSETPROC);
-        GET_PROC_ADDRESS(glDisableVertexAttribArray, "glDisableVertexAttribArray", PFNGLVERTEXATTRIBSETPROC);
-        GET_PROC_ADDRESS(glVertexAttribPointer, "glVertexAttribPointer", PFNGLVERTEXATTRIBPTRPROC);
-        GET_PROC_ADDRESS(glCompressedTexImage2D, "glCompressedTexImage2D", PFNGLTEXPARAM2DPROC);
-        GET_PROC_ADDRESS(glCompressedTexSubImage2D, "glCompressedTexSubImage2D", PFNGLCOMPRTEXSUB2DPROC);
-        GET_PROC_ADDRESS(glGenBuffersARB, "glGenBuffers", PFNGLGENBUFFERSPROC);
-        GET_PROC_ADDRESS(glDeleteBuffersARB, "glDeleteBuffers", PFNGLDELETEBUFFERSPROC);
-        GET_PROC_ADDRESS(glBindBufferARB, "glBindBuffer", PFNGLBINDBUFFERPROC);
-        GET_PROC_ADDRESS(glBufferDataARB, "glBufferData", PFNGLBUFFERDATAPROC);
-        GET_PROC_ADDRESS(glGenRenderbuffers, "glGenRenderbuffers", PFNGLGENRENDERBUFFERSPROC);
-        GET_PROC_ADDRESS(glBindRenderbuffer, "glBindRenderbuffer", PFNGLBINDRENDERBUFFERPROC);
-        GET_PROC_ADDRESS(glRenderbufferStorage, "glRenderbufferStorage", PFNGLRENDERBUFFERSTORAGEPROC);
-        GET_PROC_ADDRESS(glFramebufferTexture2D, "glFramebufferTexture2D", PFNGLRENDERBUFFERTEXTURE2DPROC);
-        GET_PROC_ADDRESS(glFramebufferRenderbuffer, "glFramebufferRenderbuffer", PFNGLFRAMEBUFFERRENDERBUFFERPROC);
-        GET_PROC_ADDRESS(glGenFramebuffers, "glGenFramebuffers", PFNGLGENFRAMEBUFFERSPROC);
-        GET_PROC_ADDRESS(glBindFramebuffer, "glBindFramebuffer", PFNGLBINDFRAMEBUFFERPROC);
-        GET_PROC_ADDRESS(glDeleteFramebuffers, "glDeleteFramebuffers", PFNGLDELETEFRAMEBUFFERSPROC);
-        GET_PROC_ADDRESS(glDeleteRenderbuffers, "glDeleteRenderbuffers", PFNGLDELETERENDERBUFFERSPROC);
-        GET_PROC_ADDRESS(glBufferSubDataARB, "glBufferSubData", PFNGLBUFFERSUBDATAPROC);
-        GET_PROC_ADDRESS(glMapBufferARB, "glMapBuffer", PFNGLMAPBUFFERPROC); // unused
-        GET_PROC_ADDRESS(glUnmapBufferARB, "glUnmapBuffer", PFNGLUNMAPBUFFERPROC); // unused
-        GET_PROC_ADDRESS(glActiveTexture, "glActiveTexture", PFNGLACTIVETEXTUREPROC);
-        GET_PROC_ADDRESS(glCheckFramebufferStatus, "glCheckFramebufferStatus", PFNGLCHECKFRAMEBUFFERSTATUSPROC);
-        GET_PROC_ADDRESS(glGetAttribLocation, "glGetAttribLocation", PFNGLGETATTRIBLOCATIONPROC);
-        GET_PROC_ADDRESS(glGetActiveAttrib, "glGetActiveAttrib", PFNGLGETACTIVEATTRIBPROC);
-        GET_PROC_ADDRESS(glCreateShader, "glCreateShader", PFNGLCREATESHADERPROC);
-        GET_PROC_ADDRESS(glShaderSource, "glShaderSource", PFNGLSHADERSOURCEPROC);
-        GET_PROC_ADDRESS(glCompileShader, "glCompileShader", PFNGLCOMPILESHADERPROC);
-        GET_PROC_ADDRESS(glGetShaderiv, "glGetShaderiv", PFNGLGETSHADERIVPROC);
-        GET_PROC_ADDRESS(glGetShaderInfoLog, "glGetShaderInfoLog", PFNGLGETSHADERINFOLOGPROC);
-        GET_PROC_ADDRESS(glGetProgramInfoLog, "glGetProgramInfoLog", PFNGLGETPROGRAMINFOLOGPROC);
-        GET_PROC_ADDRESS(glDeleteShader, "glDeleteShader", PFNGLDELETESHADERPROC);
-        GET_PROC_ADDRESS(glCreateProgram, "glCreateProgram", PFNGLCREATEPROGRAMPROC);
-        GET_PROC_ADDRESS(glAttachShader, "glAttachShader", PFNGLATTACHSHADERPROC);
-        GET_PROC_ADDRESS(glLinkProgram, "glLinkProgram", PFNGLLINKPROGRAMPROC);
-        GET_PROC_ADDRESS(glDeleteProgram, "glDeleteProgram", PFNGLDELETEPROGRAMPROC);
-        GET_PROC_ADDRESS(glUseProgram, "glUseProgram", PFNGLUSEPROGRAMPROC);
-        GET_PROC_ADDRESS(glGetProgramiv, "glGetProgramiv", PFNGLGETPROGRAMIVPROC);
-        GET_PROC_ADDRESS(glGetActiveUniform, "glGetActiveUniform", PFNGLGETACTIVEUNIFORMPROC);
-        GET_PROC_ADDRESS(glGetUniformLocation, "glGetUniformLocation", PFNGLGETUNIFORMLOCATIONPROC);
-        GET_PROC_ADDRESS(glUniform4fv, "glUniform4fv", PFNGLUNIFORM4FVPROC);
-        GET_PROC_ADDRESS(glUniformMatrix4fv, "glUniformMatrix4fv", PFNGLUNIFORMMATRIX4FVPROC);
-        GET_PROC_ADDRESS(glUniform1i, "glUniform1i", PFNGLUNIFORM1IPROC);
-        GET_PROC_ADDRESS(glStencilOpSeparate, "glStencilOpSeparate", PFNGLSTENCILOPSEPARATEPROC);
-        GET_PROC_ADDRESS(glStencilFuncSeparate, "glStencilFuncSeparate", PFNGLSTENCILFUNCSEPARATEPROC);
-        GET_PROC_ADDRESS(glTexSubImage3D, "glTexSubImage3D", PFNGLTEXSUBIMAGE3DPROC);
-        GET_PROC_ADDRESS(glTexImage3D, "glTexImage3D", PFNGLTEXIMAGE3DPROC);
-        GET_PROC_ADDRESS(glCompressedTexImage3D, "glCompressedTexImage3D", PFNGLCOMPRESSEDTEXIMAGE3DPROC);
-        GET_PROC_ADDRESS(glCompressedTexSubImage3D, "glCompressedTexSubImage3D", PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC);
-
-        GET_PROC_ADDRESS_OPTIONAL(glDispatchCompute,  "glDispatchCompute",  PFNGLDISPATCHCOMPUTEPROC);
-        GET_PROC_ADDRESS_OPTIONAL(glMemoryBarrier,    "glMemoryBarrier",    PFNGLMEMORYBARRIERPROC);
-        GET_PROC_ADDRESS_OPTIONAL(glBindImageTexture, "glBindImageTexture", PFNGLBINDIMAGETEXTUREPROC);
-
-        GET_PROC_ADDRESS(glBindBufferBase, "glBindBufferBase", PFNGLBINDBUFFERBASEPROC);
-        GET_PROC_ADDRESS(glBufferData, "glBufferData", PFNGLBUFFERDATAPROC);
-        GET_PROC_ADDRESS(glGetUniformBlockIndex, "glGetUniformBlockIndex", PFNGLGETUNIFORMBLOCKINDEXPROC);
-        GET_PROC_ADDRESS(glGetActiveUniformBlockiv, "glGetActiveUniformBlockiv", PFNGLGETACTIVEUNIFORMBLOCKIVPROC);
-        GET_PROC_ADDRESS(glGetActiveUniformsiv, "glGetActiveUniformsiv", PFNGLGETACTIVEUNIFORMSIVPROC);
-        GET_PROC_ADDRESS(glGenBuffers, "glGenBuffers", PFNGLGENBUFFERSPROC);
-        GET_PROC_ADDRESS(glBindBuffer, "glBindBuffer", PFNGLBINDBUFFERPROC);
-        GET_PROC_ADDRESS(glUniformBlockBinding, "glUniformBlockBinding", PFNGLUNIFORMBLOCKBINDINGPROC);
-
-    #if !defined(GL_ES_VERSION_2_0)
-        GET_PROC_ADDRESS(glGetStringi,"glGetStringi",PFNGLGETSTRINGIPROC);
-        GET_PROC_ADDRESS(glGenVertexArrays, "glGenVertexArrays", PFNGLGENVERTEXARRAYSPROC);
-        GET_PROC_ADDRESS(glBindVertexArray, "glBindVertexArray", PFNGLBINDVERTEXARRAYPROC);
-        GET_PROC_ADDRESS(glDrawBuffers, "glDrawBuffers", PFNGLDRAWBUFFERSPROC);
-        GET_PROC_ADDRESS(glGetFragDataLocation, "glGetFragDataLocation", PFNGLGETFRAGDATALOCATIONPROC);
-        GET_PROC_ADDRESS(glBindFragDataLocation, "glBindFragDataLocation", PFNGLBINDFRAGDATALOCATIONPROC);
-        GET_PROC_ADDRESS(glDrawArraysInstanced, "glDrawArraysInstanced", PFNGLDRAWARRAYSINSTANCEDPROC);
-        GET_PROC_ADDRESS(glDrawElementsInstanced, "glDrawElementsInstanced", PFNGLDRAWELEMENTSINSTANCEDPROC);
-        GET_PROC_ADDRESS(glVertexAttribDivisor, "glVertexAttribDivisor", PFNGLVERTEXATTRIBDIVISORPROC);
-    #endif
-
-    #undef GET_PROC_ADDRESS
-#endif
-
         context->m_IsGles3Version = 1; // 0 == gles 2, 1 == gles 3
         context->m_PipelineState  = GetDefaultPipelineState();
 
@@ -2982,11 +2775,7 @@ static void LogFrameBufferError(GLenum status)
 
         if (context->m_IsShaderLanguageGles) // 0 == glsl, 1 == gles
         {
-            if (context->m_IsGles3Version)
-            {
-                return language == ShaderDesc::LANGUAGE_GLES_SM300;
-            }
-            return language == ShaderDesc::LANGUAGE_GLES_SM100;
+            return language == ShaderDesc::LANGUAGE_GLES_SM100 || language == ShaderDesc::LANGUAGE_GLES_SM300;
         }
         else if (shader_type == ShaderDesc::SHADER_TYPE_COMPUTE)
         {
diff --git a/engine/graphics/src/opengl/graphics_opengl_defines.h b/engine/graphics/src/opengl/graphics_opengl_defines.h
index be545b86e4..0a8fe93eb4 100644
--- a/engine/graphics/src/opengl/graphics_opengl_defines.h
+++ b/engine/graphics/src/opengl/graphics_opengl_defines.h
@@ -43,12 +43,10 @@
 #define GL_HAS_RENDERDOC_SUPPORT
 #include <dlib/safe_windows.h>
 #include <stdlib.h>
-#include <GL/gl.h>
-#include <GL/glu.h>
-#include <win32/glut.h>
 
-#include "win32/glext.h"
-#include "win32/glcorearb.h"
+#define GL_GLEXT_PROTOTYPES
+#include <angle_gl.h>
+#define GL_BGRA GL_BGRA_EXT
 
 #elif defined (ANDROID)
 #define GL_GLEXT_PROTOTYPES
diff --git a/engine/graphics/wscript b/engine/graphics/wscript
index 7c083563ce..6943507e88 100644
--- a/engine/graphics/wscript
+++ b/engine/graphics/wscript
@@ -59,7 +59,7 @@ def configure(conf):
     elif platform == "arm64-linux":
         conf.env.append_value('LINKFLAGS', ['-lXext', '-lX11', '-lXi', '-lEGL', '-lGLESv1_CM', '-lGLESv2', '-lpthread'])
     elif target_os == TargetOS.WINDOWS:
-        conf.env.append_value('LINKFLAGS', ['opengl32.lib'])
+        conf.env.append_value('LINKFLAGS', ['libEGL.dll.lib', 'libGLESv2.dll.lib'])
 
     conf.env.append_value('INCLUDES', "../src")
     conf.env.append_value('INCLUDES', os.path.join(dynamo_ext, "include"))
diff --git a/engine/tools/wscript b/engine/tools/wscript
index 725e994cea..3a8d806ec4 100755
--- a/engine/tools/wscript
+++ b/engine/tools/wscript
@@ -48,7 +48,8 @@ def configure(conf):
     elif platform == 'x86_64-ios':
         pass
     elif target_os == TargetOS.WINDOWS:
-        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'shell32.lib', 'xinput9_1_0.lib', 'dinput8.lib', 'dxguid.lib'])
+        conf.env.append_value('LINKFLAGS', ['user32.lib', 'shell32.lib', 'xinput9_1_0.lib', 'dinput8.lib', 'dxguid.lib'])
+        conf.env.append_value('LINKFLAGS', ['libEGL.dll.lib', 'libGLESv2.dll.lib'])
     elif target_os == TargetOS.ANDROID:
         conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])
 
diff --git a/scripts/build.py b/scripts/build.py
index c3e2d85a8c..c44cf80e4c 100755
--- a/scripts/build.py
+++ b/scripts/build.py
@@ -193,7 +193,8 @@ PACKAGES_WIN32=[
     "glfw-3.4",
     "box2d-3.0.0",
     "box2d_defold-2.2.1",
-    "opus-1.5.2"]
+    "opus-1.5.2",
+    "angle-5fb77159"]
 
 PACKAGES_WIN32_64=[
     "protobuf-3.20.1",
@@ -212,7 +213,8 @@ PACKAGES_WIN32_64=[
     "directx-headers-1.611.0",
     "box2d-3.0.0",
     "box2d_defold-2.2.1",
-    "opus-1.5.2"]
+    "opus-1.5.2",
+    "angle-5fb77159"]
 
 PACKAGES_LINUX_X86_64=[
     "protobuf-3.20.1",
